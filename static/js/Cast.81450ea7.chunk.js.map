{"version":3,"file":"static/js/Cast.81450ea7.chunk.js","mappings":"0NACA,EAAuB,mB,SCKR,SAASA,IACxB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACOC,GAAMC,EAAAA,EAAAA,MAAND,IAEJE,EAAAA,EAAAA,YAAU,YACPC,EAAAA,EAAAA,GAAUH,GAAII,KAAKL,KACnB,CAACC,IAGJ,OAEH,eAAIK,UAAWC,EAAf,SACIR,EAAOS,KAAI,SAAAC,GACV,OACC,2BAEG,gBAAKC,IAAG,UATC,mCASD,OAAiBD,EAAME,cAAgBC,IAAKH,EAAMI,QAC9D,uBAAIJ,EAAMI,QACT,uCAAeJ,EAAMK,eAHhBL,EAAMR,W,mJCpBjB,IAAMc,EAAM,gCACNC,EAAM,mCAECC,EAAmB,WAC9B,OAAOC,MAAM,GAAD,OAAIH,EAAJ,sCAAqCC,IAC/CX,MAAK,SAAAc,GACH,OAAGA,EAASC,GACFD,EAASE,OAGZC,QAAQC,OAAO,IAAIC,MAAM,2CAGzBC,EAAa,SAAAC,GAC1B,OAAOR,MAAM,GAAD,OAAIH,EAAJ,gCAA+BC,EAA/B,kBAA4CU,IACvDrB,MAAK,SAAAc,GACH,OAAGA,EAASC,GACFD,EAASE,OAGZC,QAAQC,OAAO,IAAIC,MAAM,2CAGtBG,EAAa,SAAA1B,GACvB,OAAOiB,MAAM,GAAD,OAAIH,EAAJ,iBAAgBd,EAAhB,oBAA8Be,IACzCX,MAAK,SAAAc,GAAQ,OAAIA,EAASE,UAC1BhB,MAAK,SAAAuB,GAEN,OADAA,EAAKC,OAASD,EAAKC,OAAOC,SAAQ,qBAAGjB,QAAiBkB,KAAK,MACpDH,MAMGxB,EAAY,SAAAH,GACtB,OAAOiB,MAAM,GAAD,OAAIH,EAAJ,iBAAgBd,EAAhB,4BAAsCe,IACjDX,MAAK,SAAAc,GAAQ,OAAIA,EAASE,UAC1BhB,MAAK,SAAAuB,GACH,OAAOA,EAAKI,SAILC,EAAe,SAAAhC,GAC5B,OAAOiB,MAAM,GAAD,OAAIH,EAAJ,iBAAgBd,EAAhB,4BAAsCe,IACjDX,MAAK,SAAAc,GAAQ,OAAIA,EAASE,UAC1BhB,MAAK,SAAAuB,GACH,OAAOA,EAAKM","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","service/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\"};","import PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport {fetchCast} from '../../service/api';\nimport s from './Cast.module.css';\n\nexport default function Cast() {  \nconst [movies, setMovies] = useState([]);\nconst {id} = useParams();\n\n   useEffect(() => {\n      fetchCast(id).then(setMovies); \n   }, [id]);\n   const posterUrl = `https://image.tmdb.org/t/p/w200`;\n\n   return (\n\n<ul className={s.list}>\n   {movies.map(movie => {\n     return (\n      <li\n      key={movie.id}>\n         <img src={`${posterUrl}${movie.profile_path}`} alt={movie.name}></img>\n     <p>{movie.name}</p>\n      <p>Character: {movie.character}</p>\n     \n    </li> )\n   })}\n</ul>\n\n   );\n}\n\nCast.propTypes = {\n   casts: PropTypes.arrayOf(\n     PropTypes.shape({\n       id: PropTypes.number.isRequired,\n       name: PropTypes.string.isRequired,\n       character: PropTypes.string.isRequired,\n       profile_path: PropTypes.string.isRequired,\n     })\n   ),\n };\n\n","\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'da16a0fca1d07603f8ad5b63eb5e61b5';\n\nexport const fetchTrendingDay = () => {\n  return fetch(`${URL}trending/movie/day?api_key=${KEY}`)\n   .then(response => {\n      if(response.ok) {\n         return response.json();\n      }\n   \n      return Promise.reject(new Error('Nothing was found for your request'));})   \n};\n\nexport const fetchValue = value => {\nreturn fetch(`${URL}search/movie?api_key=${KEY}&query=${value}`)\n.then(response => {\n   if(response.ok) {\n      return response.json();\n   }\n\n   return Promise.reject(new Error('Nothing was found for your request'));})   \n};\n\nexport const fetchMovie = id => {\n   return fetch(`${URL}movie/${id}?api_key=${KEY}`)\n   .then(response => response.json())\n   .then(data => { \n   data.genres = data.genres.flatMap(({ name }) => name).join(', ');\n   return data;  \n    \n   })\n  \n};\n\nexport const fetchCast = id => {\n   return fetch(`${URL}movie/${id}/credits?api_key=${KEY}`)\n   .then(response => response.json())\n   .then(data => {\n      return data.cast;\n   });\n};\n\nexport const fetchReviews = id => {\nreturn fetch(`${URL}movie/${id}/reviews?api_key=${KEY}`)\n.then(response => response.json())\n.then(data => {\n   return data.results;\n})\n};"],"names":["Cast","useState","movies","setMovies","id","useParams","useEffect","fetchCast","then","className","s","map","movie","src","profile_path","alt","name","character","URL","KEY","fetchTrendingDay","fetch","response","ok","json","Promise","reject","Error","fetchValue","value","fetchMovie","data","genres","flatMap","join","cast","fetchReviews","results"],"sourceRoot":""}