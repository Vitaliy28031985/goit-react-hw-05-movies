{"version":3,"file":"static/js/Cast.836ef1e3.chunk.js","mappings":"0NACA,EAAuB,mB,SCMR,SAASA,IACxB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACOC,GAAMC,EAAAA,EAAAA,MAAND,IAEJE,EAAAA,EAAAA,YAAU,YACPC,EAAAA,EAAAA,GAAUH,GAAII,KAAKL,KACnB,CAACC,IAKJ,OAEH,eAAIK,UAAWC,EAAf,SACIR,EAAOS,KAAI,SAAAC,GACV,OACC,2BAEG,gBAAKC,IAAG,UAXC,mCAWD,OAAiBD,EAAME,cAAgBC,IAAKH,EAAMI,QAC9D,uBAAIJ,EAAMI,QACT,uCAAeJ,EAAMK,eAHhBL,EAAMR,W,gKCrBXc,EAAM,gCACNC,EAAM,mCAECC,EAAmB,WAC9B,OAAOC,MAAM,GAAD,OAAIH,EAAJ,sCAAqCC,IAC/CX,MAAK,SAAAc,GACH,OAAGA,EAASC,GACFD,EAASE,OAGZC,QAAQC,OAAO,IAAIC,MAAM,2CAGzBC,EAAa,SAAAC,GAC1B,OAAOR,MAAM,GAAD,OAAIH,EAAJ,gCAA+BC,EAA/B,kBAA4CU,IACvDrB,MAAK,SAAAc,GACH,OAAGA,EAASC,GACFD,EAASE,OAGZC,QAAQC,OAAO,IAAIC,MAAM,2CAGtBG,EAAa,SAAA1B,GACvB,OAAOiB,MAAM,GAAD,OAAIH,EAAJ,iBAAgBd,EAAhB,oBAA8Be,IACzCX,MAAK,SAAAc,GAAQ,OAAIA,EAASE,UAC1BhB,MAAK,SAAAuB,GAEN,OADAA,EAAKC,OAASD,EAAKC,OAAOC,SAAQ,qBAAGjB,QAAiBkB,KAAK,MACpDH,MAMGxB,EAAY,SAAAH,GACtB,OAAOiB,MAAM,GAAD,OAAIH,EAAJ,iBAAgBd,EAAhB,4BAAsCe,IACjDX,MAAK,SAAAc,GAAQ,OAAIA,EAASE,UAC1BhB,MAAK,SAAAuB,GACH,OAAOI,EAAAA,EAAAA,IAAWJ,EAAKK,UAIhBC,EAAe,SAAAjC,GAC5B,OAAOiB,MAAM,GAAD,OAAIH,EAAJ,iBAAgBd,EAAhB,4BAAsCe,IACjDX,MAAK,SAAAc,GAAQ,OAAIA,EAASE,UAC1BhB,MAAK,SAAAuB,GACH,OAAOO,EAAAA,EAAAA,IAAcP,EAAKQ,c,qGCjDtB,IAAOC,EAAoB,SAACtC,GAChC,OAAOA,EAAOS,KAAI,kBACjB,CACEP,GAFe,EAAEA,GAGjBqC,MAHe,EAAMA,WAOVN,EAAa,SAACjC,GACzB,OAAOA,EAAOS,KAAI,kBACjB,CACCP,GAFgB,EAAEA,GAGlBY,KAHgB,EAAMA,KAItBF,aAJgB,EAAYA,aAK5BG,UALgB,EAA0BA,eAoB5BqB,EAAgB,SAACpC,GAC3B,OAAOA,EAAOS,KAAI,kBACjB,CACCP,GAFgB,EAAGA,GAGnBsC,OAHgB,EAAOA,OAIvBC,QAJgB,EAAeA","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","service/api.js","utils/mapper.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\"};","import PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport {fetchCast} from '../../service/api';\nimport s from './Cast.module.css';\n\n\nexport default function Cast() {  \nconst [movies, setMovies] = useState([]);\nconst {id} = useParams();\n\n   useEffect(() => {\n      fetchCast(id).then(setMovies); \n   }, [id]);\n   const posterUrl = `https://image.tmdb.org/t/p/w200`;\n\n\n\n   return (\n\n<ul className={s.list}>\n   {movies.map(movie => {\n     return (\n      <li\n      key={movie.id}>\n         <img src={`${posterUrl}${movie.profile_path}`} alt={movie.name}></img>\n     <p>{movie.name}</p>\n      <p>Character: {movie.character}</p>\n     \n    </li> )\n   })}\n</ul>\n\n   );\n}\n\nCast.propTypes = {\n   casts: PropTypes.arrayOf(\n     PropTypes.shape({\n       id: PropTypes.number.isRequired,\n       name: PropTypes.string.isRequired,\n       character: PropTypes.string.isRequired,\n       profile_path: PropTypes.string.isRequired,\n     })\n   ),\n };\n\n","import {mapperCast} from '../utils/mapper';\nimport {mapperReviews} from '../utils/mapper';\n// import {mapperMovieEl} from '../utils/mapper';\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'da16a0fca1d07603f8ad5b63eb5e61b5';\n\nexport const fetchTrendingDay = () => {\n  return fetch(`${URL}trending/movie/day?api_key=${KEY}`)\n   .then(response => {\n      if(response.ok) {\n         return response.json();\n      }\n   \n      return Promise.reject(new Error('Nothing was found for your request'));})   \n};\n\nexport const fetchValue = value => {\nreturn fetch(`${URL}search/movie?api_key=${KEY}&query=${value}`)\n.then(response => {\n   if(response.ok) {\n      return response.json();\n   }\n\n   return Promise.reject(new Error('Nothing was found for your request'));})   \n};\n\nexport const fetchMovie = id => {\n   return fetch(`${URL}movie/${id}?api_key=${KEY}`)\n   .then(response => response.json())\n   .then(data => { \n   data.genres = data.genres.flatMap(({ name }) => name).join(', ');\n   return data; \n    \n   })\n  \n};\n\nexport const fetchCast = id => {\n   return fetch(`${URL}movie/${id}/credits?api_key=${KEY}`)\n   .then(response => response.json())\n   .then(data => {\n      return mapperCast(data.cast);\n   });\n};\n\nexport const fetchReviews = id => {\nreturn fetch(`${URL}movie/${id}/reviews?api_key=${KEY}`)\n.then(response => response.json())\n.then(data => {\n   return mapperReviews(data.results);\n})\n};","export const  mapperMoviesTitle = (movies) => {\n   return movies.map(({id, title, }) =>\n   ({\n      id,\n      title,\n   }));\n   };\n\n   export const  mapperCast = (movies) => {\n      return movies.map(({id, name, profile_path, character}) =>\n      ({\n        id,\n        name,\n        profile_path,\n        character, \n      }));\n      };  \n\n      export const mapperMovieEl = (movies) => {\n         return movies.map(({ title, popularity, overview, genres, poster_path}) =>\n         ({\n           genres,\n           title,\n           popularity,\n           overview,\n           poster_path, \n         }));\n         };  \n\n         export const mapperReviews = (movies) => {\n            return movies.map(({ id, author, content,}) =>\n            ({\n              id,\n              author,\n              content,\n            }));\n            };  "],"names":["Cast","useState","movies","setMovies","id","useParams","useEffect","fetchCast","then","className","s","map","movie","src","profile_path","alt","name","character","URL","KEY","fetchTrendingDay","fetch","response","ok","json","Promise","reject","Error","fetchValue","value","fetchMovie","data","genres","flatMap","join","mapperCast","cast","fetchReviews","mapperReviews","results","mapperMoviesTitle","title","author","content"],"sourceRoot":""}